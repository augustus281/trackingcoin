// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/augustus281/trackingcoin/internal/handler/asset"
	handler3 "github.com/augustus281/trackingcoin/internal/handler/auth"
	handler2 "github.com/augustus281/trackingcoin/internal/handler/coinmarketcap"
	"github.com/augustus281/trackingcoin/internal/repository/asset"
	"github.com/augustus281/trackingcoin/internal/repository/coinmarketcap"
	"github.com/augustus281/trackingcoin/internal/repository/user"
	asset2 "github.com/augustus281/trackingcoin/internal/service/asset"
	"github.com/augustus281/trackingcoin/internal/service/auth"
	coinmarketcap2 "github.com/augustus281/trackingcoin/internal/service/coinmarketcap"
)

// Injectors from asset_wire.go:

func InitAssetRouterHandler() (*handler.AssetHandler, error) {
	iAssetRepository := asset.NewAssetRepo()
	iAssetService := asset2.NewAssetService(iAssetRepository)
	assetHandler := handler.NewAssetHandler(iAssetService)
	return assetHandler, nil
}

// Injectors from cmc_wire.go:

func InitCMCRouterHandler() (*handler2.CMCHandler, error) {
	icmcRepository := coinmarketcap.NewCMCRepo()
	icmcService := coinmarketcap2.NewCMCService(icmcRepository)
	cmcHandler := handler2.NewCMCHandler(icmcService)
	return cmcHandler, nil
}

// Injectors from user_wire.go:

func InitAuthRouterHandler() (*handler3.AuthHandler, error) {
	iUserRepository := user.NewUserRepo()
	iAuthService := auth.NewAuthService(iUserRepository)
	authHandler := handler3.NewAuthHandler(iAuthService)
	return authHandler, nil
}
