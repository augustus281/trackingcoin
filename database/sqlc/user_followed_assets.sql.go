// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_followed_assets.sql

package database

import (
	"context"
	"database/sql"
)

const createUserFollowedAsset = `-- name: CreateUserFollowedAsset :one
INSERT INTO "user_followed_assets" (
    user_id, asset_id, followed_at 
) VALUES (
    $1, $2, now()
) RETURNING id, user_id, asset_id, followed_at
`

type CreateUserFollowedAssetParams struct {
	UserID  sql.NullInt32
	AssetID sql.NullInt32
}

func (q *Queries) CreateUserFollowedAsset(ctx context.Context, arg CreateUserFollowedAssetParams) (UserFollowedAsset, error) {
	row := q.db.QueryRowContext(ctx, createUserFollowedAsset, arg.UserID, arg.AssetID)
	var i UserFollowedAsset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AssetID,
		&i.FollowedAt,
	)
	return i, err
}

const deleteUserFollowedAsset = `-- name: DeleteUserFollowedAsset :exec
DELETE FROM "user_followed_assets" WHERE user_id = $1 AND asset_id = $2
`

type DeleteUserFollowedAssetParams struct {
	UserID  sql.NullInt32
	AssetID sql.NullInt32
}

func (q *Queries) DeleteUserFollowedAsset(ctx context.Context, arg DeleteUserFollowedAssetParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserFollowedAsset, arg.UserID, arg.AssetID)
	return err
}
